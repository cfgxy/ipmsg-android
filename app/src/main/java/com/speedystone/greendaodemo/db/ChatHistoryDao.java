package com.speedystone.greendaodemo.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import online.hualin.flymsg.db.ChatHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_HISTORY".
*/
public class ChatHistoryDao extends AbstractDao<ChatHistory, Long> {

    public static final String TABLENAME = "CHAT_HISTORY";

    /**
     * Properties of entity ChatHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SenderIp = new Property(1, String.class, "senderIp", false, "SENDER_IP");
        public final static Property SenderName = new Property(2, String.class, "senderName", false, "SENDER_NAME");
        public final static Property SendMsg = new Property(3, String.class, "sendMsg", false, "SEND_MSG");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
    }


    public ChatHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public ChatHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_HISTORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SENDER_IP\" TEXT," + // 1: senderIp
                "\"SENDER_NAME\" TEXT," + // 2: senderName
                "\"SEND_MSG\" TEXT," + // 3: sendMsg
                "\"TIME\" TEXT);"); // 4: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String senderIp = entity.getSenderIp();
        if (senderIp != null) {
            stmt.bindString(2, senderIp);
        }
 
        String senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindString(3, senderName);
        }
 
        String sendMsg = entity.getSendMsg();
        if (sendMsg != null) {
            stmt.bindString(4, sendMsg);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String senderIp = entity.getSenderIp();
        if (senderIp != null) {
            stmt.bindString(2, senderIp);
        }
 
        String senderName = entity.getSenderName();
        if (senderName != null) {
            stmt.bindString(3, senderName);
        }
 
        String sendMsg = entity.getSendMsg();
        if (sendMsg != null) {
            stmt.bindString(4, sendMsg);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatHistory readEntity(Cursor cursor, int offset) {
        ChatHistory entity = new ChatHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // senderIp
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // senderName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sendMsg
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSenderIp(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSenderName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSendMsg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatHistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatHistory entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
